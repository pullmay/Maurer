
void Sbox(unsigned char *x){

    static unsigned char S[256]={
    0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
    0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
    0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
    0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
    0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
    0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
    0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
    0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
    0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
    0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
    0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
    0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
    0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
    0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
    0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
    0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
    };
    
    *x=S[*x];
    *(x+1)=S[*(x+1)];
    *(x+2)=S[*(x+2)];
    *(x+3)=S[*(x+3)];
    *(x+4)=S[*(x+4)];
    *(x+5)=S[*(x+5)];
    *(x+6)=S[*(x+6)];
    *(x+7)=S[*(x+7)];
    *(x+8)=S[*(x+8)];
    *(x+9)=S[*(x+9)];
    *(x+10)=S[*(x+10)];
    *(x+11)=S[*(x+11)];
    *(x+12)=S[*(x+12)];
    *(x+13)=S[*(x+13)];
    *(x+14)=S[*(x+14)];
    *(x+15)=S[*(x+15)];
}

void siftrow(unsigned char *x ){
    char y1,y2,y3;
    y1=*(x+1);
    *(x+1)=*(x+5);
    *(x+5)=*(x+9);
    *(x+9)=*(x+13);
    *(x+13)=y1;
    y1=*(x+2);
    y2=*(x+6);
    *(x+2)=*(x+10);
    *(x+6)=*(x+14);
    *(x+10)=y1;
    *(x+14)=y2;
    y1=*(x+3);
    y2=*(x+7);
    y3=*(x+11);
    *(x+3)=*(x+15);
    *(x+7)=y1;
    *(x+11)=y2;
    *(x+15)=y3;
}

void mixcolumns(unsigned char *x){
    
    unsigned short y1,y2,y3,y4;
    
   
    y1=(*x<<1)^(*(x+1)<<1)^*(x+1)^*(x+2)^*(x+3);
    y2=*x^(*(x+1)<<1)^(*(x+2)<<1)^*(x+2)^*(x+3);
    y3=*x^*(x+1)^(*(x+2)<<1)^(*(x+3)<<1)^*(x+3);
    y4=(*x<<1)^*x^*(x+1)^*(x+2)^(*(x+3)<<1);
    *x=(y1^((y1>>8)*0x1b))&0xff;
    *(x+1)=(y2^((y2>>8)*0x1b))&0xff;
    *(x+2)=(y3^((y3>>8)*0x1b))&0xff;
    *(x+3)=(y4^((y4>>8)*0x1b))&0xff;
    
    y1=(*(x+4)<<1)^(*(x+5)<<1)^*(x+5)^*(x+6)^*(x+7);
    y2=*(x+4)^(*(x+5)<<1)^(*(x+6)<<1)^*(x+6)^*(x+7);
    y3=*(x+4)^*(x+5)^(*(x+6)<<1)^(*(x+7)<<1)^*(x+7);
    y4=(*(x+4)<<1)^*(x+4)^*(x+5)^*(x+6)^(*(x+7)<<1);
    *(x+4)=(y1^((y1>>8)*0x1b))&0xff;
    *(x+5)=(y2^((y2>>8)*0x1b))&0xff;
    *(x+6)=(y3^((y3>>8)*0x1b))&0xff;
    *(x+7)=(y4^((y4>>8)*0x1b))&0xff;
    
    y1=(*(x+8)<<1)^(*(x+9)<<1)^*(x+9)^*(x+10)^*(x+11);
    y2=*(x+8)^(*(x+9)<<1)^(*(x+10)<<1)^*(x+10)^*(x+11);
    y3=*(x+8)^*(x+9)^(*(x+10)<<1)^(*(x+11)<<1)^*(x+11);
    y4=(*(x+8)<<1)^*(x+8)^*(x+9)^*(x+10)^(*(x+11)<<1);
    *(x+8)=(y1^((y1>>8)*0x1b))&0xff;
    *(x+9)=(y2^((y2>>8)*0x1b))&0xff;
    *(x+10)=(y3^((y3>>8)*0x1b))&0xff;
    *(x+11)=(y4^((y4>>8)*0x1b))&0xff;
    
    y1=(*(x+12)<<1)^(*(x+13)<<1)^*(x+13)^*(x+14)^*(x+15);
    y2=*(x+12)^(*(x+13)<<1)^(*(x+14)<<1)^*(x+14)^*(x+15);
    y3=*(x+12)^*(x+13)^(*(x+14)<<1)^(*(x+15)<<1)^*(x+15);
    y4=(*(x+12)<<1)^*(x+12)^*(x+13)^*(x+14)^(*(x+15)<<1);
    *(x+12)=(y1^((y1>>8)*0x1b))&0xff;
    *(x+13)=(y2^((y2>>8)*0x1b))&0xff;
    *(x+14)=(y3^((y3>>8)*0x1b))&0xff;
    *(x+15)=(y4^((y4>>8)*0x1b))&0xff;
    
    
}


void addkey(unsigned char *x,unsigned char *k){
    
    *x^=*k;
    *(x+1)^=*(k+1);
    *(x+2)^=*(k+2);
    *(x+3)^=*(k+3);
    *(x+4)^=*(k+4);
    *(x+5)^=*(k+5);
    *(x+6)^=*(k+6);
    *(x+7)^=*(k+7);
    *(x+8)^=*(k+8);
    *(x+9)^=*(k+9);
    *(x+10)^=*(k+10);
    *(x+11)^=*(k+11);
    *(x+12)^=*(k+12);
    *(x+13)^=*(k+13);
    *(x+14)^=*(k+14);
    *(x+15)^=*(k+15);
}




void keyexpancion(unsigned char *k, unsigned char *k_exp) {

	static unsigned char S[256] = {
		0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
		0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
		0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
		0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
		0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
		0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
		0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
		0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
		0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
		0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
		0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
		0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
		0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
		0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
		0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
		0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
	};

	unsigned long tmp, w[44], y1, y2, y3, y4;
	unsigned char a, b, c, d;
	int i = 0;

	for (i = 0; i<4; i++) {
		w[i] = (*(k+4*i) << 24) ^ (*(k + 4 * i+1) << 16) ^ (*(k + 4 * i + 2) << 8) ^ *(k + 4 * i + 3);
	}

	for (i = 4; i<44; i++) {
		tmp = w[i - 1];
		if (i % 4 == 0) {
			a = (tmp >> 16) & 0xff;
			b = (tmp >> 8) & 0xff;
			c = tmp & 0xff;
			d = (tmp >> 24) & 0xff;
			if (i == 4) { a = S[a]^0x1; }
			if (i>4&&i<33) { a = S[a] ^ (0x1 << ((i / 4) - 1)); }
			if (i == 36) { a = S[a] ^ 0x1b; }
			if (i == 40) { a = S[a] ^ 0x36; }
			b = S[b];
			c = S[c];
			d = S[d];
			y1 = a;
			y2 = b;
			y3 = c;
			y4 = d;
			tmp = (y1 << 24) ^ (y2 << 16) ^ (y3 << 8) ^ y4;
		}
		w[i] = w[i - 4] ^ tmp;
	}

	for (i = 0; i<44; i += 1) {
		*(k_exp + 4 * i) = (w[i] >> 24) & 0xff;
		*(k_exp + 4 * i + 1) = (w[i] >> 16) & 0xff;
		*(k_exp + 4 * i + 2) = (w[i] >> 8) & 0xff;
		*(k_exp + 4 * i + 3) = w[i] & 0xff;
	}


}


void aes(unsigned char *keyexp,unsigned int *p, unsigned int *c){

    unsigned char r[16],plaintext[16],ca;
    unsigned short sh;
    unsigned long y1,y2,y3,y4;
    
    int i,j,k,l;
    

	plaintext[0] = (*p >> 24) & 0xff;
	plaintext[1] = (*p >> 16) & 0xff;
	plaintext[2] = (*p >> 8) & 0xff;
	plaintext[3] = (*p) & 0xff;
	plaintext[4] = (*(p + 1) >> 24) & 0xff;
	plaintext[5] = (*(p + 1) >> 16) & 0xff;
	plaintext[6] = (*(p + 1) >> 8) & 0xff;
	plaintext[7] = (*(p + 1) )& 0xff;
	plaintext[8] = (*(p + 2)>> 24) & 0xff;
	plaintext[9] = (*(p + 2) >> 16) & 0xff;
	plaintext[10] = (*(p + 2) >> 8) & 0xff;
	plaintext[11] = (*(p + 2)) & 0xff;
	plaintext[12] = (*(p + 3) >> 24) & 0xff;
	plaintext[13] = (*(p + 3) >> 16) & 0xff;
	plaintext[14] = (*(p + 3) >> 8) & 0xff;
	plaintext[15] = (*(p + 3)) & 0xff;
    
	
	
       addkey(plaintext,&(*keyexp));

       for(i=1;i<10;i++){
           Sbox(plaintext);
           siftrow(plaintext);
           mixcolumns(plaintext);
           addkey(plaintext,&(*(keyexp+16*i)));
       }
       
       Sbox(plaintext);
       siftrow(plaintext);
       addkey(plaintext,keyexp+160);

	   *c = (plaintext[0] << 24) ^ (plaintext[1] << 16) ^ (plaintext[2] << 8) ^ plaintext[3];
	   *(c+1) = (plaintext[4] << 24) ^ (plaintext[5] << 16) ^ (plaintext[6] << 8) ^ plaintext[7];
	   *(c+2) = (plaintext[8] << 24) ^ (plaintext[9] << 16) ^ (plaintext[10] << 8) ^ plaintext[11];
	   *(c+3) = (plaintext[12] << 24) ^ (plaintext[13] << 16) ^ (plaintext[14] << 8) ^ plaintext[15];
	 
}



















